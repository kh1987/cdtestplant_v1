
#user  nobody;

# 最大进场数，一般根据cpu最大核数一样
worker_processes  auto;

error_log  logs/error.log  crit;

pid  logs/nginx.pid;
# 配置Nginx worker进程最大打开文件数
worker_rlimit_nofile 51200;

events {
    worker_connections  1024;
}

# 文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等
http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    # 虚拟主机配置 - 配置反向代理、动静分离、负载均衡都在这里
    server {
        # 本虚拟主机的监听所有8181端口
        listen       8181;
        # 本虚拟主机的名称和IP地址
        server_name  localhost;
        # 取消默认最大POST请求1M设置
        client_max_body_size 100M;
		
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # 所有访问本机8181端口，会访问nginx根目录html文件，前端放这里nginx/html文件夹
        location / {
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto https;
			set_real_ip_from 0.0.0.0/0;
			real_ip_header X-Forwarded-For;
            root   html/dist;
            index  index.html index.htm;
            # 这行是解决F5刷新
            try_files $uri $uri/ /index.html;
			error_page 405 =200 @405; # 必须加上才能请求到里面去
        }

        # nginx转发所有以/api开头的请求
        location /api {
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
			proxy_set_header REMOTE-HOST $remote_addr;
			proxy_set_header X-Real-IP  $remote_addr;
            add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
			add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
			set_real_ip_from 0.0.0.0/0;
			real_ip_header X-Forwarded-For;
			# Nginx 监听到请求 api后，将请求转发给 localhost的8000端口，因为 Django后端也要部署到这台服务器上，所以是 localhost，这样可以减少用户请求次数，加快网站访问速度
            proxy_pass http://127.0.0.1:8000; # !!!这里好像不能使用localhost
			
            # 这行是解决F5刷新
            # try_files $uri $uri/ /index.html;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
